{"name":"µMVC","tagline":"Bare Essentials PHP5 Framework","body":"# µMVC\r\n\r\nThe goal is to provide a **bare essentials**, loosely coupled approach to the often bulky solutions like CakePHP, Symfony and even CodeIgniter.\r\n\r\nµMVC comes with one easy config file, optional PDO database connection and just three helper methods. All while still **providing core features** like view caching, custom URL routing and error pages.\r\n\r\n## Requirements\r\n\r\n* PHP >= 5.3.0 ([PDO](http://php.net/manual/en/book.pdo.php), [ReflectionClass](http://www.php.net/manual/en/class.reflectionclass.php) and [object model](http://php.net/manual/en/language.oop5.php))\r\n* .htaccess privilege ([AllowOverride All](http://httpd.apache.org/docs/current/mod/core.html#allowoverride))\r\n* Apache's [mod\\_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)\r\n* A (sub)domain\r\n\r\n## Installing\r\n\r\n1. [Download](https://github.com/rick-stevens/umvc/archive/master.zip) the latest copy of µMVC.\r\n2. Make all subfolders of `/system/tmp/` writable (chmod).\r\n3. Modify `/app/configs/config.php` (optional).\r\n\r\n## Documentation\r\n\r\n### Controllers\r\n\r\nFile syntax: `/app/controllers/examplename.php` (lowercase filename).  \r\nClass syntax: `class ExampleName extends Controller {}`.\r\n\r\n* `$this->view->save( $key [, $value = NULL ] )` saves a view variable (or set of variables when `$key` is an associative array).\r\n* `$this->view->display( $file_name [, $caching = FALSE [, $cache_id = NULL ]] )` prints the view upon destruct.\r\n* `$this->view->fetch( $file_name [, $caching = FALSE [, $cache_id = NULL ]] )` returns the view.\r\n* `$this->view->isCached( $file_name [, $cache_id = NULL ] )` checks if the view is cached.\r\n* `$this->view->clearCache( [ $file_name = NULL [, $cache_id = NULL ]] )` deletes the given view's cache or entire cache directory.\r\n\r\n### Models\r\n\r\nFile syntax: `/app/models/*.php`.  \r\nClass syntax: `class * extends Model {}`.\r\n\r\nUse `$this->db` ([PDO instance](http://php.net/manual/en/class.pdo.php)) for database access. Enable this by uncommenting the `$config['db']` lines in `/app/configs/config.php`.\r\n\r\n### Views\r\n\r\nFile syntax: `/app/views/*.php`.  \r\nTo access the config variables in views use `$config` (instead of `MVC::$config`).\r\n\r\nThe following 4 replacements only work through the view's `display()` method and will bypass any caching:\r\n\r\n* `#version#` is replaced by the framework's version name.\r\n* `#timer#` is replaced by the page's total load time in seconds.\r\n* `#queries#` is replaced by the amount of database queries processed.\r\n* `#query_timer#` is replaced by the total query load time in seconds.\r\n\r\n### Global helpers\r\n\r\n* `MVC::$config` accesses the config variables set in `/app/configs/config.php`.\r\n* `MVC::redirect( $location [, $status_code = 302 ] )` creates a local redirect. (`$location` format: \"/link/to/page\")\r\n* `MVC::strip( $input )` recursively trims and replaces multiple whitespace characters with a single space (useful for `$_GET` and `$_POST`).\r\n* `MVC::errorPage( $error_code [, $message = NULL ] )` prints an error page. If `$message` is not set, `/app/views/errorPage.php` will try print one based on the `$error_code`.\r\n\r\n## Acknowledgements\r\n\r\nµMVC is a project by [Rick Stevens](https://rickstevens.nl/).\r\n","google":"UA-1949518-10","note":"Don't delete this file! It's used internally to help with page regeneration."}